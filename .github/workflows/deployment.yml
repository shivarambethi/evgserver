name: Build and Deploy to AKS

on:
  push:
    branches:
      - testing

env:
  ACR_NAME: evgacr                       # Your Azure Container Registry name (without .azurecr.io)
  IMAGE_NAME: evgserver                  # Docker image name
  RESOURCE_GROUP: aks-cicd-rg            # Azure resource group containing AKS
  CLUSTER_NAME: evg-k8s-cluster          # AKS cluster name

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Setup JDK 8
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'

      # 3. Build Java JAR
      - name: Build JAR
        run: mvn clean package -DskipTests

      # 4. Log in to ACR using username/password from GitHub secrets
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # 5. Build and push Docker image
      - name: Build and push Docker image
        run: |
          IMAGE_TAG=${GITHUB_SHA}
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:$IMAGE_TAG .
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:$IMAGE_TAG

      # 6. Azure CLI login (important!)
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 7. Get AKS credentials to deploy
      - name: Get AKS credentials
        run: az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }} --overwrite-existing

      # 8. Deploy updated image to AKS
      - name: Deploy to AKS
        run: |
          kubectl set image deployment/${{ env.IMAGE_NAME }} ${{ env.IMAGE_NAME }}=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${GITHUB_SHA}
          kubectl rollout status deployment/${{ env.IMAGE_NAME }}
