package com.evgateway.server.pojo;


import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * Role generated by hbm2java
 */
@Entity
@Table(name = "privilege", uniqueConstraints = @UniqueConstraint(columnNames = "name"))
@JsonIgnoreProperties(ignoreUnknown = true, value = { "permissions" })
public class Privilege extends BaseEntity {

	/**
	 * 
	 */
	private static final long serialVersionUID = -8398337018625834262L;

	@Column(name = "name", unique = true, length = 50)
	private String name;
	private Set<Permission> permissions = new HashSet<Permission>();

	public Privilege() {
	}

	public Privilege(String name, Set<Permission> permissions) {
		this.name = name;
		this.permissions = permissions;
	}

	public Privilege(String name) {

		this.name = name;
	}

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@ManyToMany(mappedBy = "permission", fetch = FetchType.EAGER, cascade = CascadeType.PERSIST)
	@Transient
	public Set<Permission> getPermissions() {
		return permissions;
	}

	public void setPermissions(Set<Permission> permissions) {
		this.permissions = permissions;
	}

	@Override
	public String toString() {
		return String.format("%s(id=%d, name='%s')", this.getClass().getSimpleName(), this.getId(), this.getName());
	}

	@Override
	public boolean equals(Object o) {
		if (this == o)
			return true;
		if (o == null)
			return false;

		if (o instanceof Privilege) {
			final Privilege other = (Privilege) o;
			return BaseEntity.equal(getId(), other.getId()) && BaseEntity.equal(getName(), other.getName());
		}
		return false;
	}

	@Override
	public int hashCode() {
		return BaseEntity.hashCode(getId(), getName());
	}

}
