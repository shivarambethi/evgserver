package com.evgateway.server.pojo;


import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * Role generated by hbm2java
 */
@Entity
@Table(name = "permission", uniqueConstraints = @UniqueConstraint(columnNames = "name"))
@JsonIgnoreProperties(ignoreUnknown = true, value = { "roles" })
public class Permission extends BaseEntity {

	/**
	 * 
	 */
	private static final long serialVersionUID = -8398337018625834262L;

	@Column(name = "name", unique = true, length = 50)
	private String name;

	@Column(name = "flag", nullable = false)
	private boolean flag = false;

	private Set<Role> roles;
	private Set<Menu> menus = new HashSet<Menu>(0);
	private Set<Privilege> privileges = new HashSet<Privilege>(0);

	public Permission() {
	}

	public Permission(String name, Set<Role> roles) {
		this.name = name;
		this.roles = roles;
	}

	public Permission(String name) {

		this.name = name;
	}

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	// @ManyToOne(fetch = FetchType.LAZY)
	// @JoinColumn(name = "role_id")
	@ManyToMany(mappedBy = "role", fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.REFRESH })
	@Transient
	public Set<Role> getRoles() {
		return roles;
	}

	public void setRoles(Set<Role> roles) {
		this.roles = roles;
	}

	@ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, targetEntity = Menu.class)
	@JoinTable(name = "permission_in_menu", uniqueConstraints = @UniqueConstraint(columnNames = { "menu_id",
			"permission_id" }), joinColumns = {
					@JoinColumn(name = "permission_id", nullable = false, updatable = false, referencedColumnName = "id") }, inverseJoinColumns = {
							@JoinColumn(name = "menu_id", nullable = false, updatable = false, referencedColumnName = "id") })
	public Set<Menu> getMenus() {
		return this.menus;
	}

	public void setMenus(Set<Menu> menus) {
		this.menus = menus;
	}

	@ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, targetEntity = Privilege.class)
	@JoinTable(name = "permission_in_privilege", uniqueConstraints = @UniqueConstraint(columnNames = { "privilege_id",
			"permission_id" }), joinColumns = {
					@JoinColumn(name = "permission_id", nullable = false, updatable = false, referencedColumnName = "id") }, inverseJoinColumns = {
							@JoinColumn(name = "privilege_id", nullable = false, updatable = false, referencedColumnName = "id") })
	public Set<Privilege> getPrivileges() {
		return this.privileges;
	}

	public void setPrivileges(Set<Privilege> privileges) {
		this.privileges = privileges;
	}

	@Override
	public String toString() {
		return String.format("%s(id=%d, name='%s')", this.getClass().getSimpleName(), this.getId(), this.getName());
	}

	@Override
	public boolean equals(Object o) {
		if (this == o)
			return true;
		if (o == null)
			return false;

		if (o instanceof Permission) {
			final Permission other = (Permission) o;
			return BaseEntity.equal(getId(), other.getId()) && BaseEntity.equal(getName(), other.getName());
		}
		return false;
	}

	public boolean isFlag() {
		return flag;
	}

	public void setFlag(boolean flag) {
		this.flag = flag;
	}

	@Override
	public int hashCode() {
		return BaseEntity.hashCode(getId(), getName());
	}

}
