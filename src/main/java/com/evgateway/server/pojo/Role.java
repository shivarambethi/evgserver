package com.evgateway.server.pojo;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import org.springframework.security.core.GrantedAuthority;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * Role generated by hbm2java
 */
@Entity
@Table(name = "role", uniqueConstraints = @UniqueConstraint(columnNames = "rolename"))
@NamedQueries({ @NamedQuery(name = "@HQL_GET_ALL_ROLES", query = "from Role where rolename!='Admin' order by id") })
@JsonIgnoreProperties(ignoreUnknown = true, value = { "users" })
public class Role extends BaseEntity implements GrantedAuthority {

	/**
	 * 
	 */
	private static final long serialVersionUID = -377652385835180057L;
	
	@Column(name = "rolename", unique = true, length = 50)
	private String rolename;
	@Transient
	private Set<Permission> permissions = new HashSet<Permission>(0);

	
	private Set<User> users = new HashSet<User>();

	public Role() {
	}

	public Role(String rolename, Set<User> users) {
		this.rolename = rolename;
		// this.users = users;
	}

	public Role(String rolename) {

		this.rolename = rolename;
	}

	public String getRolename() {
		return this.rolename;
	}

	public void setRolename(String rolename) {
		this.rolename = rolename;
	}

	@ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, targetEntity = Permission.class)
	@JoinTable(name = "roles_in_permissions", uniqueConstraints = @UniqueConstraint(columnNames = { "permission_id",
			"role_id" }), joinColumns = {
					@JoinColumn(name = "role_id", nullable = false, updatable = false, referencedColumnName = "id") }, inverseJoinColumns = {
							@JoinColumn(name = "permission_id", nullable = false, updatable = false, referencedColumnName = "id") })
	public Set<Permission> getPermissions() {
		return permissions;
	}

	public void setPermissions(Set<Permission> permissions) {
		this.permissions = permissions;
	}

	@ManyToMany(mappedBy = "user", fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.REFRESH })
	@Transient
	public Set<User> getUsers() {
		return users;
	}

	public void setUsers(Set<User> users) {
		this.users = users;
	}

	@Override
	public String toString() {
		return String.format("%s(id=%d, rolename='%s')", this.getClass().getSimpleName(), this.getId(),
				this.getRolename());
	}

	@Override
	public boolean equals(Object o) {
		if (this == o)
			return true;
		if (o == null)
			return false;

		if (o instanceof Role) {
			final Role other = (Role) o;
			return BaseEntity.equal(getId(), other.getId()) && BaseEntity.equal(getRolename(), other.getRolename());
		}
		return false;
	}

	@Override
	public int hashCode() {
		return BaseEntity.hashCode(getId(), getRolename());
	}

	@Override
	@Transient
	public String getAuthority() {
		return getRolename();
	}

}
