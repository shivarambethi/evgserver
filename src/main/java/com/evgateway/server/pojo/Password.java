package com.evgateway.server.pojo;

import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * Password generated by hbm2java
 */
@Entity
@Table(name = "password")
@JsonIgnoreProperties(ignoreUnknown = true, value = { "user" })
public class Password extends BaseEntity {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	// static Logger logger = LoggerFactory.getLogger(Password.class);
	private static final int EXPIRATION = 60 * 24;
	/*
	 * @NotNull(message = "{error.password.password.null}")
	 * 
	 * @NotEmpty(message = "{error.password.password.empty}")
	 * 
	 * @Size(max = 500, message = "{error.password.password.max}")
	 */
	@Column(name = "password", length = 500)
	private String password;

	// @Size(max = 500, message = "{error.password.previousPassword.max}")
	@Column(name = "previousPassword", length = 500)
	private String previousPassword;

	/*
	 * @NotNull(message = "{error.password.lastChangedDate.null}")
	 * 
	 * @NotEmpty(message = "{error.password.lastChangedDate.empty}")
	 */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "lastChangedDate")
	private Date lastChangedDate;

	@Column(name = "PasswordFailuresSinceLastsuccess")
	private Integer passwordFailuresSinceLastsuccess;

	// @Size(max = 200, message = "{error.password.pwdSalt.max}")
	@Column(name = "PasswordSalt", length = 200)
	private String passwordSalt;

	// @Size(max = 250, message = "{error.password.pwdVerificationToken.max}")
	@Column(name = "PasswordVerificationToken", length = 45)
	private String passwordVerificationToken;

	@Temporal(TemporalType.DATE)
	@Column(name = "PasswordVerificationExpiration", length = 20)
	private Date passwordVerificationExpiration;

	private String oldRefId;
	private String uid;

	private boolean isPwdExpired;



	private User user;

	public Password() {
	}

	public Password(Date passwordVerificationExpiration, Date lastChangedDate, String password, String previousPassword,
			Integer passwordFailuresSinceLastsuccess, String passwordSalt, String passwordVerificationToken) {
		// this.user = user;
		this.passwordVerificationExpiration = passwordVerificationExpiration;
		this.lastChangedDate = lastChangedDate;
		this.password = password;
		this.previousPassword = previousPassword;
		this.passwordFailuresSinceLastsuccess = passwordFailuresSinceLastsuccess;
		this.passwordSalt = passwordSalt;
		this.passwordVerificationToken = passwordVerificationToken;

	}

	public Password(String password, Date lastChangedDate) {
		this.password = password;
		this.lastChangedDate = lastChangedDate;
	}

	public Password(String password) {
		this.password = password;
		this.lastChangedDate = new Timestamp(new Date().getTime());
	}

	public Password(User user, String password) {
		this.user = user;
		this.password = password;
		this.lastChangedDate = new Timestamp(new Date().getTime());
	}

	public Password(final String token, final User user) {
		super();

		this.passwordVerificationToken = token;
		this.user = user;
		this.passwordVerificationExpiration = calculateExpiryDate(EXPIRATION);
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "PasswordVerificationExpiration", length = 10)
	public Date getPasswordVerificationExpiration() {
		return this.passwordVerificationExpiration;
	}

	public void setPasswordVerificationExpiration(Date passwordVerificationExpiration) {
		this.passwordVerificationExpiration = passwordVerificationExpiration;
	}

	@Temporal(TemporalType.TIMESTAMP)
	public Date getLastChangedDate() {
		return this.lastChangedDate;
	}

	

	public void setLastChangedDate(Date lastChangedDate) {
		this.lastChangedDate = lastChangedDate;
	}

	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getPreviousPassword() {
		return this.previousPassword;
	}

	public void setPreviousPassword(String previousPassword) {
		this.previousPassword = previousPassword;
	}

	public Integer getPasswordFailuresSinceLastsuccess() {
		return this.passwordFailuresSinceLastsuccess;
	}

	public void setPasswordFailuresSinceLastsuccess(Integer passwordFailuresSinceLastsuccess) {
		this.passwordFailuresSinceLastsuccess = passwordFailuresSinceLastsuccess;
	}

	public String getPasswordSalt() {
		return this.passwordSalt;
	}

	public void setPasswordSalt(String passwordSalt) {
		this.passwordSalt = passwordSalt;
	}

	public String getPasswordVerificationToken() {
		return this.passwordVerificationToken;
	}

	public void setPasswordVerificationToken(String passwordVerificationToken) {
		this.passwordVerificationToken = passwordVerificationToken;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "user_id")
	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	public String getOldRefId() {
		return oldRefId;
	}

	public void setOldRefId(String oldRefId) {
		this.oldRefId = oldRefId;
	}

	public Date calculateExpiryDate(final int expiryTimeInMinutes) {
		final Calendar cal = Calendar.getInstance();
		cal.setTimeInMillis(new Date().getTime());
		cal.add(Calendar.MINUTE, expiryTimeInMinutes);
		return new Date(cal.getTime().getTime());
	}

	@Column(name = "isPwdExpired", columnDefinition = "double precision not null default 0")
	public boolean isPwdExpired() {
		return isPwdExpired;
	}

	public void setPwdExpired(boolean isPwdExpired) {
		this.isPwdExpired = isPwdExpired;
	}

	public String getUid() {
		return uid;
	}

	public void setUid(String uid) {
		this.uid = uid;
	}

	@Override
	public String toString() {
		return "Password [password=" + password + ", previousPassword=" + previousPassword + ", lastChangedDate="
				+ lastChangedDate + ", passwordFailuresSinceLastsuccess=" + passwordFailuresSinceLastsuccess
				+ ", passwordSalt=" + passwordSalt + ", passwordVerificationToken=" + passwordVerificationToken
				+ ", passwordVerificationExpiration=" + passwordVerificationExpiration + ", oldRefId=" + oldRefId
				+ ", uid=" + uid + ", isPwdExpired=" + isPwdExpired + ", user=" + user + "]";
	}
}
